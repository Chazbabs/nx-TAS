%option prefix="TasScriptyy"
/* This FLex file was machine-generated by the BNF converter */
%{
#include <string.h>
#include "Parser.H"
#define YY_BUFFER_LENGTH 4096
extern int TasScriptyy_mylinenumber ;
static char YY_PARSED_STRING[YY_BUFFER_LENGTH];
static void YY_BUFFER_APPEND(char *s)
{
  strcat(YY_PARSED_STRING, s); //Do something better here!
}
static void YY_BUFFER_RESET(void)
{
  for(int x = 0; x < YY_BUFFER_LENGTH; x++)
    YY_PARSED_STRING[x] = 0;
}

%}

LETTER [a-zA-Z]
CAPITAL [A-Z]
SMALL [a-z]
DIGIT [0-9]
IDENT [a-zA-Z0-9'_]
%START YYINITIAL COMMENT CHAR CHARESC CHAREND STRING ESCAPED
%%

<YYINITIAL>""      	 return TASSCRIPT__SYMB_0;
<YYINITIAL>"+ "      	 return TASSCRIPT__SYMB_1;
<YYINITIAL>" "      	 return TASSCRIPT__SYMB_2;
<YYINITIAL>"- "      	 return TASSCRIPT__SYMB_3;
<YYINITIAL>"] "      	 return TASSCRIPT__SYMB_4;
<YYINITIAL>"[ "      	 return TASSCRIPT__SYMB_5;
<YYINITIAL>"! "      	 return TASSCRIPT__SYMB_6;
<YYINITIAL>"pro_controller "      	 return TASSCRIPT__SYMB_7;
<YYINITIAL>"rgb("      	 return TASSCRIPT__SYMB_8;
<YYINITIAL>","      	 return TASSCRIPT__SYMB_9;
<YYINITIAL>")"      	 return TASSCRIPT__SYMB_10;
<YYINITIAL>"A"      	 return TASSCRIPT__SYMB_11;
<YYINITIAL>"B"      	 return TASSCRIPT__SYMB_12;
<YYINITIAL>"DD"      	 return TASSCRIPT__SYMB_13;
<YYINITIAL>"DL"      	 return TASSCRIPT__SYMB_14;
<YYINITIAL>"DR"      	 return TASSCRIPT__SYMB_15;
<YYINITIAL>"DU"      	 return TASSCRIPT__SYMB_16;
<YYINITIAL>"L"      	 return TASSCRIPT__SYMB_17;
<YYINITIAL>"LS"      	 return TASSCRIPT__SYMB_18;
<YYINITIAL>"R"      	 return TASSCRIPT__SYMB_19;
<YYINITIAL>"RS"      	 return TASSCRIPT__SYMB_20;
<YYINITIAL>"SL"      	 return TASSCRIPT__SYMB_21;
<YYINITIAL>"SR"      	 return TASSCRIPT__SYMB_22;
<YYINITIAL>"X"      	 return TASSCRIPT__SYMB_23;
<YYINITIAL>"Y"      	 return TASSCRIPT__SYMB_24;
<YYINITIAL>"ZL"      	 return TASSCRIPT__SYMB_25;
<YYINITIAL>"ZR"      	 return TASSCRIPT__SYMB_26;

<YYINITIAL>"#"[^\n]*\n  ++TasScriptyy_mylinenumber ; 	 /* BNFC single-line comment */;
<YYINITIAL>{DIGIT}+      	 TasScriptyylval.int_ = atoi(yytext); return TASSCRIPT__INTEGER_;
<YYINITIAL>{LETTER}{IDENT}*      	 TasScriptyylval.string_ = strdup(yytext); return TASSCRIPT__IDENT_;
\n  ++TasScriptyy_mylinenumber ;
<YYINITIAL>[ \t\r\n\f]      	 /* ignore white space. */;
<YYINITIAL>.      	 return TASSCRIPT__ERROR_;
%%
int TasScriptinitialize_lexer(FILE *inp) { yyrestart(inp); BEGIN YYINITIAL; }
int yywrap(void) { return 1; }

