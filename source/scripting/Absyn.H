#ifndef TASSCRIPT_ABSYN_HEADER
#define TASSCRIPT_ABSYN_HEADER

#include<string>
#include<vector>

//C++ Abstract Syntax Interface generated by the BNF Converter.
namespace TasScript
{
/********************   TypeDef Section    ********************/

typedef int Integer;
typedef char Char;
typedef double Double;
typedef std::string String;
typedef std::string Ident;




/********************   Forward Declarations    ********************/

class Line;
class Command;
class ControllerType;
class Color;
class Button;
class L;
class CAddController;
class CRemoveController;
class CSetButton;
class CUnsetButton;
class CWait;
class CTProController;
class COLRgb;
class BButtonA;
class BButtonB;
class BButtonX;
class BButtonY;
class BBumperL;
class BBumperR;
class BBumperSL;
class BBumperSR;
class BTriggerZL;
class BTriggerZR;
class BDpadUp;
class BDpadDown;
class BDpadLeft;
class BDpadRight;
class BStickLeft;
class BStickRight;
class ListCommand;


/********************   Visitor Interfaces    ********************/
class Visitor
{
public:
  virtual ~Visitor() {}
  virtual void visitLine(Line *p) = 0;
  virtual void visitCommand(Command *p) = 0;
  virtual void visitControllerType(ControllerType *p) = 0;
  virtual void visitColor(Color *p) = 0;
  virtual void visitButton(Button *p) = 0;
  virtual void visitL(L *p) = 0;
  virtual void visitCAddController(CAddController *p) = 0;
  virtual void visitCRemoveController(CRemoveController *p) = 0;
  virtual void visitCSetButton(CSetButton *p) = 0;
  virtual void visitCUnsetButton(CUnsetButton *p) = 0;
  virtual void visitCWait(CWait *p) = 0;
  virtual void visitCTProController(CTProController *p) = 0;
  virtual void visitCOLRgb(COLRgb *p) = 0;
  virtual void visitBButtonA(BButtonA *p) = 0;
  virtual void visitBButtonB(BButtonB *p) = 0;
  virtual void visitBButtonX(BButtonX *p) = 0;
  virtual void visitBButtonY(BButtonY *p) = 0;
  virtual void visitBBumperL(BBumperL *p) = 0;
  virtual void visitBBumperR(BBumperR *p) = 0;
  virtual void visitBBumperSL(BBumperSL *p) = 0;
  virtual void visitBBumperSR(BBumperSR *p) = 0;
  virtual void visitBTriggerZL(BTriggerZL *p) = 0;
  virtual void visitBTriggerZR(BTriggerZR *p) = 0;
  virtual void visitBDpadUp(BDpadUp *p) = 0;
  virtual void visitBDpadDown(BDpadDown *p) = 0;
  virtual void visitBDpadLeft(BDpadLeft *p) = 0;
  virtual void visitBDpadRight(BDpadRight *p) = 0;
  virtual void visitBStickLeft(BStickLeft *p) = 0;
  virtual void visitBStickRight(BStickRight *p) = 0;
  virtual void visitListCommand(ListCommand *p) = 0;


  virtual void visitInteger(Integer x) = 0;
  virtual void visitChar(Char x) = 0;
  virtual void visitDouble(Double x) = 0;
  virtual void visitString(String x) = 0;
  virtual void visitIdent(Ident x) = 0;

};


class Visitable
{
 public:
  virtual ~Visitable() {}
  virtual void accept(Visitor *v) = 0;
};


/********************   Abstract Syntax Classes    ********************/

class Line : public Visitable
{
public:
  virtual Line *clone() const = 0;

};

class Command : public Visitable
{
public:
  virtual Command *clone() const = 0;

};

class ControllerType : public Visitable
{
public:
  virtual ControllerType *clone() const = 0;

};

class Color : public Visitable
{
public:
  virtual Color *clone() const = 0;

};

class Button : public Visitable
{
public:
  virtual Button *clone() const = 0;

};



class L : public Line
{
public:
  ListCommand *listcommand_;

  L(const L &);
  L &operator=(const L &);
  L(ListCommand *p1);
  ~L();
  virtual void accept(Visitor *v);
  virtual L *clone() const;
  void swap(L &);
};

class CAddController : public Command
{
public:
  Ident ident_;
  ControllerType *controllertype_;

  CAddController(const CAddController &);
  CAddController &operator=(const CAddController &);
  CAddController(Ident p1, ControllerType *p2);
  ~CAddController();
  virtual void accept(Visitor *v);
  virtual CAddController *clone() const;
  void swap(CAddController &);
};

class CRemoveController : public Command
{
public:
  Ident ident_;

  CRemoveController(const CRemoveController &);
  CRemoveController &operator=(const CRemoveController &);
  CRemoveController(Ident p1);
  ~CRemoveController();
  virtual void accept(Visitor *v);
  virtual CRemoveController *clone() const;
  void swap(CRemoveController &);
};

class CSetButton : public Command
{
public:
  Ident ident_;
  Button *button_;

  CSetButton(const CSetButton &);
  CSetButton &operator=(const CSetButton &);
  CSetButton(Ident p1, Button *p2);
  ~CSetButton();
  virtual void accept(Visitor *v);
  virtual CSetButton *clone() const;
  void swap(CSetButton &);
};

class CUnsetButton : public Command
{
public:
  Ident ident_;
  Button *button_;

  CUnsetButton(const CUnsetButton &);
  CUnsetButton &operator=(const CUnsetButton &);
  CUnsetButton(Ident p1, Button *p2);
  ~CUnsetButton();
  virtual void accept(Visitor *v);
  virtual CUnsetButton *clone() const;
  void swap(CUnsetButton &);
};

class CWait : public Command
{
public:
  Integer integer_;

  CWait(const CWait &);
  CWait &operator=(const CWait &);
  CWait(Integer p1);
  ~CWait();
  virtual void accept(Visitor *v);
  virtual CWait *clone() const;
  void swap(CWait &);
};

class CTProController : public ControllerType
{
public:
  Color *color_1;
  Color *color_2;
  Color *color_3;
  Color *color_4;

  CTProController(const CTProController &);
  CTProController &operator=(const CTProController &);
  CTProController(Color *p1, Color *p2, Color *p3, Color *p4);
  ~CTProController();
  virtual void accept(Visitor *v);
  virtual CTProController *clone() const;
  void swap(CTProController &);
};

class COLRgb : public Color
{
public:
  Integer integer_1;
  Integer integer_2;
  Integer integer_3;

  COLRgb(const COLRgb &);
  COLRgb &operator=(const COLRgb &);
  COLRgb(Integer p1, Integer p2, Integer p3);
  ~COLRgb();
  virtual void accept(Visitor *v);
  virtual COLRgb *clone() const;
  void swap(COLRgb &);
};

class BButtonA : public Button
{
public:

  BButtonA(const BButtonA &);
  BButtonA &operator=(const BButtonA &);
  BButtonA();
  ~BButtonA();
  virtual void accept(Visitor *v);
  virtual BButtonA *clone() const;
  void swap(BButtonA &);
};

class BButtonB : public Button
{
public:

  BButtonB(const BButtonB &);
  BButtonB &operator=(const BButtonB &);
  BButtonB();
  ~BButtonB();
  virtual void accept(Visitor *v);
  virtual BButtonB *clone() const;
  void swap(BButtonB &);
};

class BButtonX : public Button
{
public:

  BButtonX(const BButtonX &);
  BButtonX &operator=(const BButtonX &);
  BButtonX();
  ~BButtonX();
  virtual void accept(Visitor *v);
  virtual BButtonX *clone() const;
  void swap(BButtonX &);
};

class BButtonY : public Button
{
public:

  BButtonY(const BButtonY &);
  BButtonY &operator=(const BButtonY &);
  BButtonY();
  ~BButtonY();
  virtual void accept(Visitor *v);
  virtual BButtonY *clone() const;
  void swap(BButtonY &);
};

class BBumperL : public Button
{
public:

  BBumperL(const BBumperL &);
  BBumperL &operator=(const BBumperL &);
  BBumperL();
  ~BBumperL();
  virtual void accept(Visitor *v);
  virtual BBumperL *clone() const;
  void swap(BBumperL &);
};

class BBumperR : public Button
{
public:

  BBumperR(const BBumperR &);
  BBumperR &operator=(const BBumperR &);
  BBumperR();
  ~BBumperR();
  virtual void accept(Visitor *v);
  virtual BBumperR *clone() const;
  void swap(BBumperR &);
};

class BBumperSL : public Button
{
public:

  BBumperSL(const BBumperSL &);
  BBumperSL &operator=(const BBumperSL &);
  BBumperSL();
  ~BBumperSL();
  virtual void accept(Visitor *v);
  virtual BBumperSL *clone() const;
  void swap(BBumperSL &);
};

class BBumperSR : public Button
{
public:

  BBumperSR(const BBumperSR &);
  BBumperSR &operator=(const BBumperSR &);
  BBumperSR();
  ~BBumperSR();
  virtual void accept(Visitor *v);
  virtual BBumperSR *clone() const;
  void swap(BBumperSR &);
};

class BTriggerZL : public Button
{
public:

  BTriggerZL(const BTriggerZL &);
  BTriggerZL &operator=(const BTriggerZL &);
  BTriggerZL();
  ~BTriggerZL();
  virtual void accept(Visitor *v);
  virtual BTriggerZL *clone() const;
  void swap(BTriggerZL &);
};

class BTriggerZR : public Button
{
public:

  BTriggerZR(const BTriggerZR &);
  BTriggerZR &operator=(const BTriggerZR &);
  BTriggerZR();
  ~BTriggerZR();
  virtual void accept(Visitor *v);
  virtual BTriggerZR *clone() const;
  void swap(BTriggerZR &);
};

class BDpadUp : public Button
{
public:

  BDpadUp(const BDpadUp &);
  BDpadUp &operator=(const BDpadUp &);
  BDpadUp();
  ~BDpadUp();
  virtual void accept(Visitor *v);
  virtual BDpadUp *clone() const;
  void swap(BDpadUp &);
};

class BDpadDown : public Button
{
public:

  BDpadDown(const BDpadDown &);
  BDpadDown &operator=(const BDpadDown &);
  BDpadDown();
  ~BDpadDown();
  virtual void accept(Visitor *v);
  virtual BDpadDown *clone() const;
  void swap(BDpadDown &);
};

class BDpadLeft : public Button
{
public:

  BDpadLeft(const BDpadLeft &);
  BDpadLeft &operator=(const BDpadLeft &);
  BDpadLeft();
  ~BDpadLeft();
  virtual void accept(Visitor *v);
  virtual BDpadLeft *clone() const;
  void swap(BDpadLeft &);
};

class BDpadRight : public Button
{
public:

  BDpadRight(const BDpadRight &);
  BDpadRight &operator=(const BDpadRight &);
  BDpadRight();
  ~BDpadRight();
  virtual void accept(Visitor *v);
  virtual BDpadRight *clone() const;
  void swap(BDpadRight &);
};

class BStickLeft : public Button
{
public:

  BStickLeft(const BStickLeft &);
  BStickLeft &operator=(const BStickLeft &);
  BStickLeft();
  ~BStickLeft();
  virtual void accept(Visitor *v);
  virtual BStickLeft *clone() const;
  void swap(BStickLeft &);
};

class BStickRight : public Button
{
public:

  BStickRight(const BStickRight &);
  BStickRight &operator=(const BStickRight &);
  BStickRight();
  ~BStickRight();
  virtual void accept(Visitor *v);
  virtual BStickRight *clone() const;
  void swap(BStickRight &);
};



class ListCommand : public Visitable, public std::vector<Command*>
{
public:
  virtual void accept(Visitor *v);
  virtual ListCommand *clone() const;
};


}
#endif
